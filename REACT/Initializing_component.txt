INITIALIZING COMPONENTS / Создание экземпляра пользовательского компонента
// Весь смак компонента в том чтобы его использовать несколько раз.
<Hello name="Tom" age="33" />
// Значение из атрибута name="Tom" перейдет в свойство props.name у объекта "props".

// У нас есть данные: var BUTTONTEXT = "Click the button"; Мы их захардкодим в переменной, но вообще они могут прийти ajax-ом из API. 
// Теперь инициализируем компонент App  <App text={BUTTONTEXT} />
// После этого внутри самого компонента можно пользоваться данными из переменной BUTTONTEXT через this.props.text
// Компонент App не может менять эти данные. Зато он может передать их дальше в дочерний компонент.

var BUTTONTEXT = "Click the damn button";
   
class App extends React.Component {
	render(){
		return (
			<div>         
				<input type="submit" value={this.props.text} />	
			</div>
			);
	}
}

ReactDOM.render(<App text={BUTTONTEXT} />,  document.getElementById("root"));


// Когда приложение работает, у вас может быть несколько экземпляров одного компонента на экране, 
// каждый экземпляр компонента со своими индивидуальными свойствами и внутренним состоянием.


//Создание экземпляра пользовательского компонента 
<Welcome name="Sait" />;
//Все JSX-атрибуты проникают в этот компонент как один обьект.Мы называем его props
<Welcome name="Sait" />;
//Для компонента Welcome значение props.name будет Sait
<MyComponent sum={1 + 2 + 3 + 4} />
//Для компонента MyComponent значение props.sum будет 10

//В экземпляр компонента можно передавать любое JavaScript-выражение как prop, оборачивая {}
<MyComponent foo={1 + 2 + 3 + 4} />

// Пропсом даже не обязательно пользоваться. Данные можно передать в компонент и все. Они там будут в свойстве пропс этого обьекта записаны